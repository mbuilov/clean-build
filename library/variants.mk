#----------------------------------------------------------------------------------
# clean-build - non-recursive build system based on GNU Make
# Copyright (C) 2015-2017 Michael M. Builov, https://github.com/mbuilov/clean-build
# Licensed under GPL version 2 or any later version, see COPYING
#----------------------------------------------------------------------------------

# support for target variants, e.g.: exe := my_exe A B C
# - defines that it's needed to build 'my_exe' in 3 variants: A, B, C

# get target name - return the first word of an argument, where next words - variants (e.g. lib := my_lib R P D S)
# note: target file name (generated by 'form_trg') may be different, depending on a target variant
# $1 - target type: lib,exe,dll,... (*)
# (*) variable $1 must be defined at the time of a call of this macro, $($1) may be empty
get_target_name = $(firstword $($1))

# get list of additional non-regular variants of a given target type supported by the selected toolchain
# $1 - target type: lib,exe,dll,...
# example of additional target type-specific variant lists:
#  exe_extra_variants := P
#  lib_extra_variants := P D
#  ...
extra_variants = $($1_extra_variants)

# filter-out unsupported variants of the target and return only supported ones (at least R)
# $1 - target type: lib,exe,dll,...
# $2 - list of specified variants of the target (may be empty)
filter_variants_list = $(call filter_variants_list_f,$1,$2,extra_variants)

# extended version of 'filter_variants_list'
# $1 - target type: lib,exe,dll,...
# $2 - list of specified variants of the target (may be empty)
# $3 - name of a function which returns a list of supported by the selected toolchain non-regular variants of a given target type,
#  function must be defined at the time of a call of this macro
# note: add R to the filter pattern to not filter-out default variant R, if it was specified for the target
# note: if $(filter ...) gives no variants, return default variant R (regular), which is always supported
filter_variants_list_f = $(patsubst ,R,$(filter R $($3),$2))

# if a target may be specified with variants, like lib := my_lib R S
#  then get its variants supported by the selected toolchain
# note: returns non-empty variants list, containing at least R (regular) variant
# $1 - target type: lib,exe,dll,... (*)
# (*) variable $1 must be defined at the time of a call of this macro
get_variants = $(call get_variants_f,$1,extra_variants)

# extended version of 'get_variants'
# $1 - target type: lib,exe,dll,... (*)
# $2 - name of a function which returns a list of supported by the selected toolchain non-regular variants of a given target type,
#  function must be defined at the time of a call of this macro
# (*) variable $1 must be defined at the time of a call of this macro
get_variants_f = $(call filter_variants_list_f,$1,$(wordlist 2,999999,$($1)),$2)

# determine target name suffix (in case if building multiple variants of a target, each variant must have an unique file name)
# $1 - target type: lib,exe,dll,...
# $2 - target variant: R,P,D,S... (one of variants supported by the selected toolchain - result of $(get_variants), may be empty)
# note: no suffix if building R (regular) variant or variant is not specified (then assume R variant)
# example of target type-specific suffix generator function:
#  lib_variant_suffix = _$1
#  where: function argument $1 - always non-empty, and never R
variant_suffix = $(if $(filter-out R,$2),$(call $1_variant_suffix,$2))

# form an absolute path to the target file - call appropriate target type-specific ..._form_trg macro
# $1 - target type: lib,exe,dll,... (*)
# $2 - target variant: R,P,D,S... (one of variants supported by the selected toolchain - result of $(get_variants), may be empty)
# example of target type-specific filename generator function:
#  $1 - target name, e.g. my_exe, may be empty
#  $2 - target variant: R,P,D,S... (one of variants supported by the selected toolchain - result of $(get_variants), may be empty)
#  exe_form_trg = $(1:%=$(bin_dir)/%$(call variant_suffix,exe,$2)$(exe_suffix))
#  lib_form_trg = $(1:%=$(lib_dir)/$(lib_prefix)%$(call variant_suffix,lib,$2)$(lib_suffix))
#  ...
#  note: use $(patsubst...) to return empty value if $1 is empty
# (*) variable $1 must be defined at the time of a call of this macro, $($1) may be empty
form_trg = $(call $1_form_trg,$(get_target_name),$2)

# get filenames of all built variants of a given target
# $1 - target type: lib,exe,dll,... (*)
# (*) variable $1 must be defined at the time of a call of this macro
all_targets = $(foreach v,$(get_variants),$(call form_trg,$1,$v))

# form a name of objects directory of the target
# $1 - target type: lib,exe,dll,... (*)
# $2 - target variant: R,P,D,S... (one of variants supported by the selected toolchain - result of $(get_variants), may be empty)
# add target-specific suffix (.exe,.lib,.dll,...) to distinguish objects for the targets with equal names (but different types)
# (*) variable $1 must be defined at the time of a call of this macro
form_obj_dir = $(obj_dir)/$(get_target_name)$(if $(filter-out R,$2),_$2).$1

# construct full path to a target
# $1 - target type: lib,exe,dll,...
# $2 - target name, e.g. my_exe
# $3 - target variant, e.g. S
# note: if variant $3 is unsupported one - regular variant R will be used instead
make_trg_path = $(call $1_form_trg,$2,$(call filter_variants_list,$1,$3))

# makefile parsing first phase variables
cb_first_phase_vars += get_target_name get_variants get_variants_f form_trg all_targets form_obj_dir

# protect macros from modifications in target makefiles,
# do not trace calls to macros used in ifdefs, exported to the environment of called tools or modified via operator +=
$(call set_global,cb_first_phase_vars)

# protect macros from modifications in target makefiles, allow tracing calls to them
# note: trace namespace: variants
$(call set_global,get_target_name extra_variants filter_variants_list filter_variants_list_f \
  get_variants get_variants_f variant_suffix form_trg all_targets form_obj_dir make_trg_path,variants)
