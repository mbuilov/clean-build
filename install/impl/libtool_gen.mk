#----------------------------------------------------------------------------------
# clean-build - non-recursive build system based on GNU Make
# Copyright (C) 2015-2017 Michael M. Builov, https://github.com/mbuilov/clean-build
# Licensed under GPL version 2 or any later version, see COPYING
#----------------------------------------------------------------------------------

# libtool archive (libtool control file) generation

define LIBTOOL_ARCHIVE_TEXT
# $1 - a libtool library file
# Generated by clean-build $(CLEAN_BUILD_VERSION) build system
#
# Please DO NOT delete this file!
# It is needed by libtool for linking the library.

# The name that we can dlopen(3).
dlname='$(if $4,lib$4.so$(addprefix .,$(firstword $(subst ., ,$5))))'
libdb.so.6
db-6.1.dll

# Names of this library.
u: library_names='$(if $4,$(addprefix lib$4,$(addprefix .so.,$5 $(filter-out $5,$(firstword $(subst ., ,$5)))) .so))'
w: library_names='$(if $4,$(IMP_PREFIX)$4$(IMP_SUFFIX))'
db.lib

# The name of the static archive.
old_library='$(if $3,$(LIB_PREFIX)$3$(LIB_SUFFIX))'
db.a

# Linker flags that cannot go in dependency_libs.
inherited_linker_flags='$4'

# Libraries that this one depends upon.
dependency_libs='$5'

# Names of additional weak libraries provided by this library
weak_library_names='$6'

# Version information for lib$(firstword $1 $2).
current=$(firstword $(subst ., ,$3) 0)
age=$(firstword $(word 2,$(subst ., ,$3)) 0)
revision=$(firstword $(word 3,$(subst ., ,$3)) 0)

# Is this an already installed library?
installed=yes

# Should we warn about portability when linking against -modules?
shouldnotlink=$7

# Files to dlopen/dlpreopen
dlopen='$7'
dlpreopen='$8'

# Directory that this library needs to be installed in:
libdir='$9'
endef

# $1 - full name of generating configuration file, e.g. libmylib_pie.la for libmylib_pie/P+libmylib/R
# $2 - directory path where .la file is generated, e.g. $(LIBDIR)/x86_64-linux-gnu
# $3 - name of static variant of the library, e.g. mylib_pie ($3 may be empty, if $4 is not empty)
# $4 - name of dynamic variant of the library, e.g. mylib_st ($4 may be empty, if $3 is not empty)
# $5 - library version (major.minor.patch, major.minor, major or empty), e.g. $(MODVER)
# $6 - linker flags, e.g. -pthread
# $7 - dependency libraries, e.g. -ldl
# $8 - weak libraries (e.g. static libs linked to this shared one)
# $9 - shouldnotlink: normally no - if this is a library, yes - if this a dynamically loaded plugin (or module)
# $(10) - dlopen name
# $(11) - dlpreopen name
LIBTOOL_GEN = $(LIBTOOL_ARCHIVE_TEXT)

$(call SET_GLOBAL,LIBTOOL_ARCHIVE_TEXT LIBTOOL_GEN)

## make name of generated .la file
## $1 - static library name (may be empty if $2 is not empty)
## $2 - dynamic library name (may be empty if $1 is not empty)
#GET_LIBTOOL_ARCHIVE_NAME = $(if $1,$(LIB_PREFIX)$1,$(DLL_PREFIX)$2).la
#
## get path to installed .la-file
## $1 - static library name (may be empty if $2 - non-empty)
## $2 - dynamic library name (may be empty if $1 - non-empty)
#INSTALLED_LIBTOOL_ARCHIVE = '$(DESTDIR)$(LIBDIR)/$(GEN_LIBTOOL_ARCHIVE_NAME)'
#
## $1 - all built libraries (result of $(GET_ALL_LIBS))
## $2 - names of built static libraries, may be empty
## $3 - built dynamic library name, may be empty
#INSTALLED_LIBTOOL_ARCHIVES1 = $(foreach r,$1,$(foreach l,$(firstword $(subst ?, ,$r)),$(call \
#  INSTALLED_LIBTOOL_ARCHIVE,$(filter $l,$2),$3)))
#
## get paths to installed .la-files
## $1 - all built libraries (result of $(GET_ALL_LIBS))
## $2 - paths to built static libraries, may be empty
## $3 - path to built dynamic library, may be empty
#INSTALLED_LIBTOOL_ARCHIVES = $(call INSTALLED_LIBTOOL_ARCHIVES1,$1,$(patsubst \
#  $(LIB_PREFIX)%$(LIB_SUFFIX),%,$(notdir $2)),$(patsubst \
#  $(DLL_PREFIX)%$(DLL_SUFFIX),%,$(notdir $3)))
#
## generate contents of .la-file
## $1 - static library name (may be empty if $2 is not empty)
## $2 - dynamic library name (may be empty if $1 is not empty)
#LIBTOOL_ARCHIVE_GENERATOR = $(call LIBTOOL_ARCHIVE_TEMPLATE,$1,$2,$(MODVER))
#
## install .la-file
## $1 - static library name (may be empty if $2 - non-empty)
## $2 - dynamic library name (may be empty if $1 - non-empty)
#INSTALL_LIBTOOL_ARCHIVE = $(call ECHO_INSTALL,$(LIBTOOL_ARCHIVE_GENERATOR),$(INSTALLED_LIBTOOL_ARCHIVE),755)
#
## $1 - all built libraries (result of $(GET_ALL_LIBS))
## $2 - names of built static libraries, may be empty
## $3 - built dynamic library name, may be empty
#INSTALL_LIBTOOL_ARCHIVES1 = $(foreach r,$1,$(foreach l,$(firstword $(subst ?, ,$r)),$(newline)$(call \
#  INSTALL_LIBTOOL_ARCHIVE,$(filter $l,$2),$3)))
#
## install .la-files
## $1 - all built libraries (result of $(GET_ALL_LIBS))
## $2 - paths to built static libraries, may be empty
## $3 - path to built dynamic library, may be empty
#INSTALL_LIBTOOL_ARCHIVES = $(call INSTALL_LIBTOOL_ARCHIVES1,$1,$(patsubst \
#  $(LIB_PREFIX)%$(LIB_SUFFIX),%,$(notdir $2)),$(patsubst \
#  $(DLL_PREFIX)%$(DLL_SUFFIX),%,$(notdir $3)))

#
#
## libcharset.la - a libtool library file
## Generated by ltmain.sh (GNU libtool) 2.2.6
##
## Please DO NOT delete this file!
## It is necessary for linking the library.
#
## The name that we can dlopen(3).
#dlname='../bin/libcharset-1.dll'
#
## Names of this library.
#library_names='libcharset.dll.a'
#
## The name of the static archive.
#old_library='libcharset.a'
#
## Linker flags that can not go in dependency_libs.
#inherited_linker_flags=''
#
## Libraries that this one depends upon.
#dependency_libs=''
#
## Names of additional weak libraries provided by this library
#weak_library_names=''
#
## Version information for libcharset.
#current=1
#age=0
#revision=0
#
## Is this an already installed library?
#installed=yes
#
## Should we warn about portability when linking against -modules?
#shouldnotlink=no
#
## Files to dlopen/dlpreopen
#dlopen=''
#dlpreopen=''
#
## Directory that this library needs to be installed in:
#libdir='/usr/local/lib'
#
